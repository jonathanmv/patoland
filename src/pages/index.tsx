import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { api } from "~/utils/api";
import { UploadButton } from "~/utils/uploadthing";

export default function Home() {
  const { data: patos } = api.patos.getAll.useQuery();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <header className="sticky top-0 z-50 w-full bg-gradient-to-r from-sky-500 to-cyan-400 p-4">
          <div className="align flex flex-row">
            <h1 className=" flex-grow text-5xl font-extrabold tracking-tight text-slate-800 sm:text-[5rem]">
              Patoland
            </h1>
            <UploadButton
              endpoint="imageUploader"
              onClientUploadComplete={(res) => {
                // Do something with the response
                console.log("Files: ", res);
                alert("Upload Completed");
              }}
              onUploadError={(error: Error) => {
                // Do something with the error.
                alert(`ERROR! ${error.message}`);
              }}
            />
          </div>
        </header>

        <div className="container flex flex-col items-center justify-center gap-12 ">
          {patos?.map((pato) => (
            <Link key={pato.id} href={`/patos/${pato.id}`}>
              <Pato pato={pato} />
            </Link>
          ))}
        </div>
      </main>
    </>
  );
}

function Pato({ pato }: { pato: { imageUrl: string; id: string } }) {
  return (
    <figure className="rounded-xl md:flex md:p-0">
      <Image
        className="mx-auto md:h-auto md:w-48 md:rounded-none"
        src={pato.imageUrl}
        alt=""
        width="512"
        height="512"
      />
      <div className="space-y-4 p-6 text-center md:p-8 md:text-left">
        <div className="flex flex-row">
          <button
            type="button"
            className="mr-2 inline-flex items-center rounded-lg bg-red-500 p-2.5 text-center text-sm font-medium text-white hover:bg-red-800 focus:outline-none focus:ring-4 focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              className="h-6 w-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
              />
            </svg>
            <span className="sr-only">Icon description</span>
          </button>
          <button
            type="button"
            className="mr-2 inline-flex items-center rounded-lg bg-purple-500 p-2.5 text-center text-sm font-medium text-white hover:bg-purple-800 focus:outline-none focus:ring-4 focus:ring-purple-300 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="h-6 w-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M7.217 10.907a2.25 2.25 0 100 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186l9.566-5.314m-9.566 7.5l9.566 5.314m0 0a2.25 2.25 0 103.935 2.186 2.25 2.25 0 00-3.935-2.186zm0-12.814a2.25 2.25 0 103.933-2.185 2.25 2.25 0 00-3.933 2.185z"
              />
            </svg>
            <span className="sr-only">Icon description</span>
          </button>
        </div>
      </div>
    </figure>
  );
}
